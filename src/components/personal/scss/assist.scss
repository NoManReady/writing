@charset "utf-8";
$version: 20151127;
$vendors:
-o-,
-ms-,
-moz-,
-xhtml-,
-webkit- !default;


@mixin __vendor($property, $value...){
    @each $vendor in $vendors {
        #{$vendor}#{$property}: $value;
    }
    #{$property}: $value;
}

/**
 * 添加多浏览器前缀
 */
@mixin render($property, $value...){
    @include __vendor($property, $value...);
}

%clearfix{
    *zoom:1;        // for IE6,7
    &:after{
        content: '';
        height: 0;
        visibility: hidden;
        display: block;
        clear: both;
    }
}

// 文字溢出 ...
%ellipse {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// 兼容IE7的 inline-block
%inline-block {
    display: inline-block;
    *vertical-align: auto; // fixed IE7 inline-block
    zoom: 1;
    *display: inline;
}

// 淡入
@mixin fadeIn($time){
    display: block;
    @include render(animation, fadeIn #{$time}s linear forwards);
}
// 0.6s淡入
%fadeIn {
    @include fadeIn(.6);
}

// 模糊加深 $depth px效果
@mixin blur($depth) {
    //filter: url(blur.svg#blur); /* FireFox, Chrome, Opera */
    -webkit-filter: blur(#{$depth}px); /* Chrome, Opera */
    -moz-filter: blur(#{$depth}px);
    -ms-filter: blur(#{$depth}px);
    filter: blur(#{$depth}px);
    filter: progid:DXImageTransform.Microsoft.Blur(PixelRadius=$depth*10, MakeShadow=false); /* IE6~IE9 */
}
// 模糊加深 2px 效果
%blur {
    @include blur(2);
}
// 还原模糊效果
%blur-recover {
    @include blur(0);
}

// 动画
@mixin transition($value...) {
    @include render(transition, $value);
}
%transition {
    @include transition(all .3s linear);
}

// 旋转
@mixin rotate($deg) {
    @include render(transform, rotate(#{$deg}deg));
}
%rotate {
    @include rotate(180);
}

// 图片悬浮放大
@mixin img-hover($value) {
    @include render(transform, scale(#{$value}));
}
%img-hover {
    @include img-hover(1.2);
}

// 自动顺时针旋转
@mixin autorotate($time) {
    @include render(animation, rotate $time linear infinite);
}
%autorotate {
    @include autorotate(2s);
}

// 制作箭头图标
@mixin caret (
    $className: caret,
    $direction: up,
    $borderWidth: 1px,
    $borderColor: #ccc,
    $caretWidth: 7px,
    $caretColor: #fff
) {

    $outerWidth: $borderWidth;
    $outerClassName: #{$className}-outer;
    $innerClassName: #{$className}-inner;
    $borderWidthList: 0;

    // calculate $borderWidth to outer's width, and fix $borderWidth
    @if ($borderWidth < $caretWidth) {
        $outerWidth: $outerWidth + $caretWidth;
    } @else {
        $borderWidth: $borderWidth - $caretWidth;
    }

    .#{$outerClassName}, .#{$innerClassName} {
        border-style: solid;
        position: absolute;
    }

    @if($direction == up){
        .#{$className} {
            top: -$outerWidth;
        }
        .#{$outerClassName} {
            border-width: 0 $outerWidth $outerWidth;
            border-color: transparent transparent $borderColor;
            left: 0;
            top: 0;
        }
        .#{$innerClassName} {
            border-width: 0 $caretWidth $caretWidth;
            border-color: transparent transparent $caretColor;
            left: $borderWidth;
            top: $borderWidth;
        }
    }
    @else if($direction == right){
        .#{$className} {
            right: 0;
        }
        .#{$outerClassName} {
            border-width: $outerWidth 0 $outerWidth $outerWidth;
            border-color: transparent transparent transparent $borderColor;
            left: 0;
            top: 0;
        }
        .#{$innerClassName} {
            border-width: $caretWidth 0 $caretWidth $caretWidth;
            border-color: transparent transparent transparent $caretColor;
            left: 0;
            top: $borderWidth;
        }
    }
    @else if($direction == bottom){
        .#{$className} {
            bottom: -$outerWidth;
        }
        .#{$outerClassName} {
            border-width: $outerWidth $outerWidth 0 $outerWidth;
            border-color: $borderColor transparent transparent;
            left: 0;
            bottom: 0;
        }
        .#{$innerClassName} {
            border-width: $caretWidth $caretWidth 0 $caretWidth;
            border-color: $caretColor transparent transparent;
            left: $borderWidth;
            bottom: $borderWidth;
        }
    }
    @else if($direction == left){
        .#{$className} {
            left: -$outerWidth;
        }
        .#{$outerClassName} {
            border-width: $outerWidth $outerWidth $outerWidth 0;
            border-color: transparent $borderColor transparent transparent;
            left: 0;
            top: 0;
        }
        .#{$innerClassName} {
            border-width: $caretWidth $caretWidth $caretWidth 0;
            border-color: transparent $caretColor transparent transparent;
            left: $borderWidth;
            top: $borderWidth;
        }
    }
}

// 取多重嵌套map的值
@function getMapValue ($map, $list) {
    $listLength: length($list);
    $value: $map;
    @for $index from 1 through $listLength {
        $value: map-get($value, unquote(nth($list, $index)));
    }
    @return $value;
}



// fadeIn
@keyframes fadeIn {
    0% { opacity: 0; }
    100% { opacity: 1; }
}
@-webkit-keyframes fadeIn {
    0% { opacity: 0; }
    100% { opacity: 1; }
}
@-moz-keyframes fadeIn {
    0% { opacity: 0; }
    100% { opacity: 1; }
}
@-o-keyframes fadeIn {
    0% { opacity: 0; }
    100% { opacity: 1; }
}

@keyframes autorotate {
    0% { @include render(transform, rotate(0deg)) }
    25% { @include render(transform, rotate(-90deg)) }
    50% { @include render(transform, rotate(-180deg)) }
    75% { @include render(transform, rotate(-270deg)) }
    100% { @include render(transform, rotate(-360deg)) }
}
@-webkit-keyframes autorotate {
    0% { @include render(transform, rotate(0deg)) }
    25% { @include render(transform, rotate(-90deg)) }
    50% { @include render(transform, rotate(-180deg)) }
    75% { @include render(transform, rotate(-270deg)) }
    100% { @include render(transform, rotate(-360deg)) }
}
@-moz-keyframes autorotate {
    0% { @include render(transform, rotate(0deg)) }
    25% { @include render(transform, rotate(-90deg)) }
    50% { @include render(transform, rotate(-180deg)) }
    75% { @include render(transform, rotate(-270deg)) }
    100% { @include render(transform, rotate(-360deg)) }
}
@-o-keyframes autorotate {
    0% { @include render(transform, rotate(0deg)) }
    25% { @include render(transform, rotate(-90deg)) }
    50% { @include render(transform, rotate(-180deg)) }
    75% { @include render(transform, rotate(-270deg)) }
    100% { @include render(transform, rotate(-360deg)) }
}